<?xml version="1.0" encoding="utf-8"?>

<!-- TOP JAVA QUESTIONS -->
<java>
    <entry>
        <id>1</id>
        <question>Which two method you need to implement for key Object in HashMap?</question>
        <answer>In order to use any object as Key in HashMap, it must implements equals and hashcode method in Java. </answer>
    </entry>
    <entry>
        <id>2</id>
        <question>What is immutable object? Can you write immutable object?</question>
        <answer>Immutable object cannot be modified once created. Any modification in Immutable object result in new object. For example String is immutable in Java. Mostly Immutable are also final in Java, in order to prevent subclass from overriding methods in Java which can compromise Immutability. You can achieve same functionality by making member as non final but private and not modifying them except in constructor.</answer>
    </entry>
    <entry>
        <id>3</id>
        <question>What is the difference between creating String as new() and literal?</question>
        <answer>When we create string with new() Operator, it’s created in heap and not added into string pool while String created using literal are created in String pool itself which exists in PermGen area of heap.</answer>
    </entry>
    <entry>
        <id>4</id>
        <question>What is difference between String, StringBuffer and StringBuilder in Java?</question>
        <answer>String is fast, immutable, thread safe, and its stored in Constant String Pool.
StringBuffer is mutable, each method is synchronized so StringBuffer is thread safe, and because of that, its slower than rest.
StringBuilder is fast, mutable, NOT thread safe, and its stored in heap.</answer>
    </entry>
    <entry>
        <id>5</id>
        <question>What is the difference between ArrayList and Vector?</question>
        <answer>ArrayList is fast, many threads can work on object at the same time; it increase its size by half and doesn't define the increment size. Only Iterator class can by used for traverse ArrayList.
Vector is slower, thread safe, synchronized (one thread can work at the object at the time); Vector have setSize() to define increment size, by default it double its size. For traverse you can use both Enumeration and Iterator.</answer>
    </entry>
    <entry>
        <id>6</id>
        <question>What is difference between Executor.submit() and Executor.execute() method?</question>
        <answer>Executor.submit() returns Future object which can be used to check result of submitted task. Can be used to cancel or to check isDone() etc.
And Executor.execute() simply stars the tasks.</answer>
    </entry>
    <entry>
        <id>7</id>
        <question>What is the difference between Factory and Abstract Factory Pattern?</question>
        <answer>Abstract Factory provides one more level of abstraction. Consider different factories each extended from an Abstract Factory and responsible for creation of different hierarchies of objects based on the type of factory. E.g. AbstractFactory extended by AutomobileFactory, UserFactory, RoleFactory etc. Each individual factory would be responsible for creation of objects in that genre.</answer>
    </entry>
    <entry>
        <id>8</id>
        <question>What is Singleton? Is it better to make whole method synchronized or only critical section synchronized?</question>
        <answer>Singleton in Java is a class with just one instance in whole Java application, for example java.lang.Runtime is a Singleton class. Creating Singleton was tricky prior Java 4 but once Java 5 introduced Enum its very easy. see my article How to create thread-safe Singleton in Java for more details on writing Singleton using enum and double checked locking which is purpose of this Java interview question.</answer>
    </entry>
    <entry>
        <id>9</id>
        <question>Give an example where you prefer abstract class over interface?</question>
        <answer>An abstract class can have shared state or functionality. An interface is only a promise to provide the state or functionality. A good abstract class will reduce the amount of code that has to be rewritten because it's functionality or state can be shared.
The interface has no defined information to be shared.
In Java you can only extend one class but implement multiple interfaces.
            </answer>
    </entry>
    <entry>
        <id>10</id>
        <question>What is difference between overloading and overriding?</question>
        <answer>Overloading is adding a method with the same name but different signature. Overriding is changing the method implementation in the subclass.</answer>
    </entry>
    <entry>
        <id>11</id>
        <question>Why is access to non-static variables not allowed from static methods in Java?</question>
        <answer>You can not access non-static data from static context in Java simply because non-static variables are associated with a particular instance of object while Static is not associated with any instance.</answer>
    </entry>
    <entry>
        <id>12</id>
        <question>What is design patterns? Have you used any design pattern in your code?</question>
        <answer>Design patterns are tried and tested way to solve particular design issues by various programmers in the world. Design patterns are extension of code reuse.</answer>
    </entry>
    <entry>
        <id>13</id>
        <question>What is main benefit of using factory pattern? Where do you use it?</question>
        <answer>Factory pattern’s main benefit is increased level of encapsulation while creating objects. If you use Factory to create object you can later replace original implementation of Products or classes with more advanced and high performance implementation without any change on client layer.</answer>
    </entry>
    <entry>
        <id>14</id>
        <question>What is observer design pattern in Java?</question>
        <answer>Observer design pattern is based on communicating changes in state of object to observers so that they can take there action. Simple example is a weather system where change in weather must be reflected in Views to show to public.
Here weather object is Subject while different views are Observers.</answer>
    </entry>
    <entry>
        <id>15</id>
        <question>What will be the problem if you don't override hashcode() method?</question>
        <answer>You will not be able to recover your object from hash Map if that is used as key in HashMap.</answer>
    </entry>
    <entry>
        <id>16</id>
        <question>Is it better to synchronize critical section of getInstance() method or whole getInstance() method?</question>
        <answer>Answer is critical section because if we lock whole method than every time some one call this method will have to wait even though we are not creating any object.</answer>
    </entry>
    <entry>
        <id>17</id>
        <question>What’s wrong using HashMap in multithreaded environment? When get() method go to infinite loop?</question>
        <answer>Get() will go to infinite loop during concurrent access and re-sizing.</answer>
    </entry>
    <entry>
        <id>18</id>
        <question>What will happen if you call return statement or System.exit on try or catch block ? will finally block execute?</question>
        <answer>Finally block will execute even if you put return statement in try block or catch block, but finally block won't run if you call System.exit form try or catch.</answer>
    </entry>
    <entry>
        <id>19</id>
        <question>Can you override private or static method in Java?</question>
        <answer>You can not override private or static method in Java, if you create similar method with same return type and same method arguments that's called method hiding.</answer>
    </entry>
    <entry>
        <id>20</id>
        <question>What will happen if we put a key object in a HashMap which is already there?</question>
        <answer>If you put the same key again than it will replace the old mapping because HashMap doesn't allow duplicate keys.</answer>
    </entry>
    <entry>
        <id>21</id>
        <question>If a method throws NullPointerException in super class, can we override it with a method which throws RuntimeException?</question>
        <answer>One more tricky Java questions from overloading and overriding concept. Answer is you can very well throw super class of RuntimeException in overridden method but you can not do same if its checked Exception.</answer>
    </entry>
    <entry>
        <id>22</id>
        <question>How do you ensure that N thread can access N resources without deadlock?</question>
        <answer>Key point here is order, if you acquire resources in a particular order and release resources in reverse order you can prevent deadlock.</answer>
    </entry>
    <entry>
        <id>23</id>
        <question>Can you override private or static method in Java?</question>
        <answer>You can not override private or static method in Java, if you create similar method with same return type and same method arguments that's called method hiding.</answer>
    </entry>
    <entry>
        <id>24</id>
        <question>What is difference between CyclicBarrier and CountDownLatch in Java?</question>
        <answer>Main difference between both of them is that you can reuse CyclicBarrier even if Barrier is broken but you can not reuse CountDownLatch in Java.</answer>
    </entry>
    <entry>
        <id>25</id>
        <question>Can you access non static variable in static context?</question>
        <answer>No you can not access static variable in non static context in Java.</answer>
    </entry>
</java>